<UserControl x:Class="X13.UI.InspectorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:my="clr-namespace:X13.UI"
             xmlns:mym="clr-namespace:X13.model"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300" FontFamily="Consolas" FontSize="12" Background="#FFFFFFFF">
  <Grid>
    <Grid.Resources>
      <!--Converter for Indentation of items-->
      <my:TreeListViewConverter x:Key="TreeListViewConverter"/>
      <my:GridColumnSpringConverter x:Key="ColumnSpringConverter"/>
    </Grid.Resources>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition/>
    </Grid.RowDefinitions>
    <ItemsControl ItemsSource="{Binding NameList}" BorderThickness="0" Background="#00000000">
      <ItemsControl.ItemsPanel>
        <ItemsPanelTemplate>
          <StackPanel Orientation="Horizontal"/>
        </ItemsPanelTemplate>
      </ItemsControl.ItemsPanel>
      <ItemsControl.ItemTemplate>
        <DataTemplate>
          <StackPanel Orientation="Horizontal" MouseLeftButtonUp="PathMouseLRBU" MouseRightButtonUp="PathMouseLRBU" >
            <Border BorderThickness="1" Padding="1, 1, 4, 1" Margin="0,2" Cursor="Hand">
              <TextBlock Text="{Binding Name}" ToolTip="{Binding Path}" VerticalAlignment="Center"  />
              <Border.Style>
                <Style TargetType="Border">
                  <Setter Property="Background" Value="#40E0E0E0" />
                  <Setter Property="BorderBrush" Value="#40808080" />
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding IsRoot}" Value="true">
                      <Setter Property="Background" Value="#40A0B0FF" />
                    </DataTrigger>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Setter Property="BorderBrush" Value="Black" />
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </Border.Style>
            </Border>
            <TextBlock Text="/" VerticalAlignment="Center"  />
          </StackPanel>
        </DataTemplate>
      </ItemsControl.ItemTemplate>
    </ItemsControl>

    <my:TreeListView Grid.Row="1" x:Name="tlInspector" AllowsColumnReorder="False" ItemsSource="{Binding Children}" 
                     MouseRightButtonUp="PathMouseLRBU" AllowDrop="True" DragEnter="tlInspector_DragEnter" Drop="tlInspector_Drop" DragOver="tlInspector_DragEnter">
      <my:TreeListView.Resources>
        <Style TargetType="GridViewColumnHeader" x:Key="WhHeader">
          <Setter Property="Background" Value="White" />
          <Setter Property="FontWeight" Value="Bold" />
          <Setter Property="HorizontalContentAlignment" Value="Left" />
          <Setter Property="BorderThickness" Value="0,1" />
          <Setter Property="BorderBrush" Value="Black" />
          <Setter Property="Padding"  Value="5,0,2,0" />
        </Style>
        <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource WhHeader}" />
      </my:TreeListView.Resources>
      <my:TreeListView.Template>
        <ControlTemplate TargetType="{x:Type my:TreeListView}">
          <ControlTemplate.Resources>
            <!--Apply this style to all 'TreeViewItem's.-->
            <Style TargetType="TreeViewItem">
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="TreeViewItem">
                    <!--Grid containing the current information and the subnodes.-->
                    <StackPanel Background="White">
                      <!--Border wrapping the content presenter.-->
                      <Border x:Name="Border" BorderThickness="0,0,0,1" BorderBrush="Gainsboro" MouseUp="ItemMouseUp" MouseLeave="ItemMouseLeave" PreviewMouseLeftButtonDown="ItemPreviewMLBD">
                        <!--GridViewRowPrsenter containing the current information.-->
                        <GridViewRowPresenter Content="{TemplateBinding Header}" Columns="{Binding Columns, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=my:TreeListView}}"/>
                      </Border>
                      <!--ItemsPresenter containing the subnodes-->
                      <ItemsPresenter x:Name="ItemsPresenter" Visibility="Collapsed"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                      <!--Trigger used to show the sub items-->
                      <Trigger Property="IsExpanded" Value="True">
                        <Setter TargetName="ItemsPresenter" Property="Visibility" Value="Visible"/>
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
              <Setter Property="IsExpanded" Value="{Binding Expanded}" />
              <Setter Property="IsSelected" Value="{Binding IsSelected}" />
            </Style>
          </ControlTemplate.Resources>
          <!--Create a standard border around the 'TreeListView'.-->
          <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
            <!--ScrollViewer providing horizontal scrolling functionality 
                        for both, content and headers.-->
            <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                      VerticalScrollBarVisibility="Disabled">
              <!--Grid containing the header row and all the content rows.-->
              <Grid>
                <Grid.RowDefinitions>
                  <!--The header row.-->
                  <RowDefinition Height="Auto"/>
                  <!--The content row.-->
                  <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <!--The header row.-->
                <GridViewHeaderRowPresenter Columns="{TemplateBinding Columns}"
                                    AllowsColumnReorder="{TemplateBinding AllowsColumnReorder}"/>
                <!--ScrollViewer providing vertical scrolling
                                functionality for the content.-->
                <ScrollViewer HorizontalScrollBarVisibility="Disabled"
                                              VerticalScrollBarVisibility="Auto"
                                              Grid.Row="1">
                  <!--ItemsPresenter containg the content.-->
                  <ItemsPresenter/>
                </ScrollViewer>
              </Grid>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </my:TreeListView.Template>
      <!--Create an item template to specify the ItemsSource-->
      <my:TreeListView.ItemTemplate>
        <HierarchicalDataTemplate ItemsSource="{Binding Properties}" />
      </my:TreeListView.ItemTemplate>
      <my:TreeListView.Columns>
        <GridViewColumn x:Name="gcName" Header="Name" Width="200">
          <GridViewColumn.HeaderContainerStyle >
            <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource WhHeader}">
              <Setter Property="BorderThickness" Value="0,1,1,1" />
            </Style>
          </GridViewColumn.HeaderContainerStyle>
          <GridViewColumn.CellTemplate>
            <DataTemplate>
              <Grid MouseLeftButtonDown="ItemNameMouseLBD" >
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="auto"/>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="24"/>
                </Grid.ColumnDefinitions>
                <!--The Expander Button (can be used in any column (typically the first one))-->
                <my:TreeListViewExpander Grid.Column="0">
                  <my:TreeListViewExpander.Template>
                    <ControlTemplate TargetType="{x:Type my:TreeListViewExpander}">
                      <!--Use a standard toggle button-->
                      <ToggleButton x:Name="pbState" VerticalAlignment="Center" 
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeViewItem}}" 
                                      Margin="{Binding RelativeSource={x:Static RelativeSource.Self}, Converter={StaticResource TreeListViewConverter}}">
                        <ToggleButton.Template>
                          <ControlTemplate TargetType="ToggleButton">
                            <Image Stretch="None" x:Name="img" Width="16" Height="16">
                              <Image.Style>
                                <Style TargetType="Image">
                                  <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=pbState, Path=IsChecked}" Value="True">
                                      <Setter Property="Source" Value="/Dashboard;component/Images/TreeOp.png" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ElementName=pbState, Path=IsChecked}" Value="False">
                                      <Setter Property="Source" Value="/Dashboard;component/Images/TreeCl.png" />
                                    </DataTrigger>
                                  </Style.Triggers>
                                </Style>
                              </Image.Style>
                            </Image>
                          </ControlTemplate>
                        </ToggleButton.Template>
                        <ToggleButton.Style>
                          <Style TargetType="ToggleButton">
                            <Style.Triggers>
                              <!--Trigger used to show/hide the expand button-->
                              <DataTrigger Binding="{Binding HasItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeViewItem}}" Value="False">
                                <Setter Property="Visibility" Value="Hidden"/>
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </ToggleButton.Style>
                      </ToggleButton>
                    </ControlTemplate>
                  </my:TreeListViewExpander.Template>
                </my:TreeListViewExpander>
                <!--Display the name of the DataElement-->
                <TextBox x:Name="tbItemName" Text="{Binding Name, Mode=OneWay}" Grid.Column="1" VerticalAlignment="Stretch" VerticalContentAlignment="Center" 
                         LostKeyboardFocus="tbItemName_LostKeyboardFocus" PreviewKeyDown="tbItemName_PreviewKeyDown" 
                         FocusableChanged="tbItemName_FocusableChanged" Loaded="tbItemName_Loaded">
                  <TextBox.Style>
                    <Style TargetType="TextBox">
                      <Setter Property="Focusable"  Value="False" />
                      <Setter Property="IsReadOnly" Value="True" />
                      <Setter Property="Background" Value="Transparent" />
                      <Setter Property="Cursor" Value="Arrow" />
                      <Setter Property="BorderThickness" Value="1,0,0,0" />
                      <Setter Property="BorderBrush" Value="Gainsboro" />
                      <Setter Property="Margin" Value="2,0,0,0" />
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding EditName}" Value="True">
                          <Setter Property="IsReadOnly" Value="False" />
                          <Setter Property="Background" Value="AliceBlue" />
                          <Setter Property="Cursor" Value="IBeam" />
                          <Setter Property="Focusable"  Value="True" />
                        </DataTrigger>
                        <MultiDataTrigger>
                          <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeViewItem}}" Value="True" />
                            <Condition Binding="{Binding IsSelectionActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeViewItem}}" Value="True" />
                          </MultiDataTrigger.Conditions>
                          <Setter Property="BorderBrush" Value="Orange" />
                          <Setter Property="BorderThickness" Value="3,0,0,0" />
                          <Setter Property="Margin" Value="0,0,0,0" />
                        </MultiDataTrigger>
                      </Style.Triggers>
                    </Style>
                  </TextBox.Style>
                </TextBox>
                <Image Grid.Column="2" Stretch="None" Source="{Binding Declarer.Icon}" MouseUp="Image_MouseUp" />
              </Grid>
            </DataTemplate>
          </GridViewColumn.CellTemplate>
        </GridViewColumn>
        <GridViewColumn Header="Value">
          <GridViewColumn.Width>
            <MultiBinding Converter="{StaticResource ColumnSpringConverter}">
              <Binding ElementName="tlInspector" Path="ActualWidth" Mode="OneWay"/>
              <Binding ElementName="gcName" Path="ActualWidth" Mode="OneWay"/>
            </MultiBinding>
          </GridViewColumn.Width>
          <GridViewColumn.CellTemplate>
            <DataTemplate>
              <Control x:Name="ValueCellControl">
                <Control.Template>
                  <ControlTemplate TargetType="{x:Type Control}">
                    <TextBlock Text="{Binding Value}" VerticalAlignment="Center"/>
                  </ControlTemplate>
                </Control.Template>
              </Control>

              <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Declarer.View}" Value="{x:Static mym:ViewTypeEn.Bool}">
                  <Setter TargetName="ValueCellControl" Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type Control}">
                        <CheckBox IsChecked="{Binding Value}" VerticalAlignment="Center">
                          <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
                              <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
                              <Setter Property="Template">
                                <Setter.Value>
                                  <ControlTemplate TargetType="{x:Type CheckBox}">
                                    <ControlTemplate.Resources>
                                      <Storyboard x:Key="OnUnchecking">
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="38" />
                                        </DoubleAnimationUsingKeyFrames>
                                      </Storyboard>
                                      <Storyboard x:Key="OnChecking">
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                      </Storyboard>
                                    </ControlTemplate.Resources>
                                    <DockPanel x:Name="dockPanel">
                                      <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" VerticalAlignment="Center" />
                                      <Grid>
                                        <Border x:Name="BackgroundBorder" BorderThickness="0" CornerRadius="3" Height="20" Width="79" HorizontalAlignment="Left">
                                          <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                              <GradientStop Color="#FFB5B5B5" Offset="0" />
                                              <GradientStop Color="#FF96B496" Offset="0.2" />
                                              <GradientStop Color="#FF96B496" Offset="0.8" />
                                              <GradientStop Color="#FFB5B5B5" Offset="1" />
                                            </LinearGradientBrush>
                                          </Border.Background>
                                          <Grid>
                                            <Grid.ColumnDefinitions>
                                              <ColumnDefinition />
                                              <ColumnDefinition />
                                            </Grid.ColumnDefinitions>
                                            <Line x:Name="On" X1="0" Y1="0" X2="0" Y2="14" Stroke="#FF7A7A7A" StrokeThickness="2" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                            <Ellipse x:Name="Off" Width="14" Height="14" Stroke="White" StrokeThickness="2" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                          </Grid>
                                        </Border>
                                        <Border BorderBrush="#FF939393" HorizontalAlignment="Left" x:Name="slider" Width="42" Height="19" BorderThickness="1" CornerRadius="3" RenderTransformOrigin="0.5,0.5" Margin="0">
                                          <Border.RenderTransform>
                                            <TransformGroup>
                                              <ScaleTransform ScaleX="1" ScaleY="1" />
                                              <SkewTransform AngleX="0" AngleY="0" />
                                              <RotateTransform Angle="0" />
                                              <TranslateTransform X="0" Y="0" />
                                            </TransformGroup>
                                          </Border.RenderTransform>
                                          <Border.Background>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                              <GradientStop Color="#C0F0F0F0" Offset="0" />
                                              <GradientStop Color="#60CDCDCD" Offset="0.2" />
                                              <GradientStop Color="#60CDCDCD" Offset="0.8" />
                                              <GradientStop Color="#C0FBFBFB" Offset="1" />
                                            </LinearGradientBrush>
                                          </Border.Background>
                                        </Border>
                                      </Grid>
                                    </DockPanel>
                                    <ControlTemplate.Triggers>
                                      <Trigger Property="IsChecked" Value="True">
                                        <Trigger.ExitActions>
                                          <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard" />
                                        </Trigger.ExitActions>
                                        <Trigger.EnterActions>
                                          <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard" />
                                        </Trigger.EnterActions>
                                        <!-- Change Orange or Blue color here -->
                                        <Setter TargetName="BackgroundBorder" Property="Background">
                                          <Setter.Value>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                              <GradientStop Color="#FFF5F5F5" Offset="0" />
                                              <GradientStop Color="#FF00FF00" Offset="0.2" />
                                              <GradientStop Color="#FF00FF00" Offset="0.8" />
                                              <GradientStop Color="#FFF5F5F5" Offset="1" />
                                            </LinearGradientBrush>
                                          </Setter.Value>
                                        </Setter>
                                      </Trigger>
                                    </ControlTemplate.Triggers>
                                  </ControlTemplate>
                                </Setter.Value>
                              </Setter>
                            </Style>
                          </CheckBox.Style>
                        </CheckBox>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </DataTrigger>

                <DataTrigger Binding="{Binding Declarer.View}" Value="{x:Static mym:ViewTypeEn.Int}">
                  <Setter TargetName="ValueCellControl" Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type Control}">
                        <xctk:LongUpDown  Value="{Binding Value}" VerticalAlignment="Stretch" BorderThickness="0" HorizontalAlignment="Left" ParsingNumberStyle="Integer" />
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </DataTrigger>

                <DataTrigger Binding="{Binding Declarer.View}" Value="{x:Static mym:ViewTypeEn.Double}">
                  <Setter TargetName="ValueCellControl" Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type Control}">
                        <xctk:DoubleUpDown Value="{Binding Value}" VerticalAlignment="Stretch" BorderThickness="0" HorizontalAlignment="Left" />
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </DataTrigger>

                <DataTrigger Binding="{Binding Declarer.View}" Value="{x:Static mym:ViewTypeEn.DateTime}">
                  <Setter TargetName="ValueCellControl" Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type Control}">
                        <xctk:DateTimePicker Value="{Binding Value}"  VerticalAlignment="Stretch" BorderThickness="0" HorizontalAlignment="Left" />
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </DataTrigger>

                <DataTrigger Binding="{Binding Declarer.View}" Value="{x:Static mym:ViewTypeEn.String}">
                  <Setter TargetName="ValueCellControl" Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type Control}">
                        <TextBox Text="{Binding Value}" VerticalAlignment="Center" BorderThickness="0" />
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </DataTrigger>

              </DataTemplate.Triggers>
            </DataTemplate>
          </GridViewColumn.CellTemplate>
        </GridViewColumn>
      </my:TreeListView.Columns>
    </my:TreeListView>
  </Grid>
</UserControl>
